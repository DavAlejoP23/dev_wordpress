@use "sass:map";
@use "sass:string";
$svg-icons: (
  submit-icon:
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 7.601 13.296"><path d="M5.31 6.649.279 11.676a.95.95 0 1 0 1.346 1.342l5.7-5.7a.948.948 0 0 0 .027-1.306L1.629.277A.95.95 0 0 0 .283 1.619Z" fill="#fff"/></svg>',
);

/**
* Characters to escape from SVGs
* Source: https://github.com/Threespot/frontline-sass/blob/master/src/variables/_escape-chars.scss
*/
$fs-escape-chars: (
  " ": "%20",
  "'": "%22",
  '"': "%27",
  "#": "%23",
  "/": "%2F",
  ":": "%3A",
  "(": "%28",
  ")": "%29",
  "%": "%25",
  "<": "%3C",
  ">": "%3E",
  "\\":"%5C",
  "^": "%5E",
  "{": "%7B",
  "|": "%7C",
  "}": "%7D",
);

/**
 * Helper to get URL-escaped inline SVG code
 */
@function svg($name) {
  // Check if icon exists
  @if not map.has-key($svg-icons, $name) {
    @error 'icon “#{$name}” does not exists in $svg-icons map';
    @return false;
  }

  // Get icon data
  $icon-map: map.get($svg-icons, $name);

  $escaped-string: "";
  $unquote-icon: string.unquote($icon-map);
  // Loop through each character in string
  @for $i from 1 through string.length($unquote-icon) {
    $char: string.slice($unquote-icon, $i, $i);

    // Check if character is in symbol map
    $char-lookup: map.get($fs-escape-chars, $char);

    // If it is, use escaped version
    @if $char-lookup != null {
      $char: $char-lookup;
    }

    // Append character to escaped string
    $escaped-string: $escaped-string + $char;
  }

  // Return inline SVG data
  @return url("data:image/svg+xml, #{$escaped-string} ");
}

:root {
  @each $name, $code in $svg-icons {
    --svg-#{$name}: #{svg($name)};
  }
}
